// Code generated by protoc-gen-go-client. DO NOT EDIT
// version:
// protoc-gen-go-client 1.0.0

package main

import (
	context "context"
	http_client "github.com/coolseven/http-client"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

var (
	_ = new(context.Context)
	_ = new(http_client.Client)
)

type ExampleServiceHTTPClient interface {
	ListServices(ctx context.Context, req *ListServicesRequest, opts ...http_client.CallRequestOption) (resp *ListServicesResponse, err error)
	GetService(ctx context.Context, req *GetMessageRequest, opts ...http_client.CallRequestOption) (resp *GetServiceResponse, err error)
}

type ExampleServiceHTTPClientImpl struct {
	cc *http_client.Client
}

func NewExampleServiceHTTPClient(client *http_client.Client) ExampleServiceHTTPClient {
	return &ExampleServiceHTTPClientImpl{client}
}

func (c *ExampleServiceHTTPClientImpl) ListServices(ctx context.Context, in *ListServicesRequest, opts ...http_client.CallRequestOption) (*ListServicesResponse, error) {
	var out ListServicesResponse
	pattern := "/services"
	path := http_client.EncodeURL(pattern, in, true)
	err := c.cc.Request(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ExampleServiceHTTPClientImpl) GetService(ctx context.Context, in *GetMessageRequest, opts ...http_client.CallRequestOption) (*GetServiceResponse, error) {
	var out GetServiceResponse
	pattern := "/services/{name}"
	path := http_client.EncodeURL(pattern, in, true)
	err := c.cc.Request(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
